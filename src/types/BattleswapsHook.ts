/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export declare namespace BattleswapsHook {
  export type AcceptBattleParamsStruct = {
    token0: AddressLike;
    token1: AddressLike;
    requester: AddressLike;
  };

  export type AcceptBattleParamsStructOutput = [
    token0: string,
    token1: string,
    requester: string
  ] & { token0: string; token1: string; requester: string };

  export type BattleRequestStruct = {
    requester: AddressLike;
    opponent: AddressLike;
    prizePotShareToken0: BigNumberish;
    prizePotShareToken1: BigNumberish;
    duration: BigNumberish;
    startBalanceToken0: BigNumberish;
    startBalanceToken1: BigNumberish;
    token0: AddressLike;
    token1: AddressLike;
    timestamp: BigNumberish;
  };

  export type BattleRequestStructOutput = [
    requester: string,
    opponent: string,
    prizePotShareToken0: bigint,
    prizePotShareToken1: bigint,
    duration: bigint,
    startBalanceToken0: bigint,
    startBalanceToken1: bigint,
    token0: string,
    token1: string,
    timestamp: bigint
  ] & {
    requester: string;
    opponent: string;
    prizePotShareToken0: bigint;
    prizePotShareToken1: bigint;
    duration: bigint;
    startBalanceToken0: bigint;
    startBalanceToken1: bigint;
    token0: string;
    token1: string;
    timestamp: bigint;
  };

  export type BattleStruct = {
    player0: AddressLike;
    player1: AddressLike;
    startedAt: BigNumberish;
    endsAt: BigNumberish;
    player0Token0Balance: BigNumberish;
    player0Token1Balance: BigNumberish;
    player1Token0Balance: BigNumberish;
    player1Token1Balance: BigNumberish;
    battleRequest: BattleswapsHook.BattleRequestStruct;
  };

  export type BattleStructOutput = [
    player0: string,
    player1: string,
    startedAt: bigint,
    endsAt: bigint,
    player0Token0Balance: bigint,
    player0Token1Balance: bigint,
    player1Token0Balance: bigint,
    player1Token1Balance: bigint,
    battleRequest: BattleswapsHook.BattleRequestStructOutput
  ] & {
    player0: string;
    player1: string;
    startedAt: bigint;
    endsAt: bigint;
    player0Token0Balance: bigint;
    player0Token1Balance: bigint;
    player1Token0Balance: bigint;
    player1Token1Balance: bigint;
    battleRequest: BattleswapsHook.BattleRequestStructOutput;
  };

  export type RequestBattleParamsStruct = {
    prizePotShareToken0: BigNumberish;
    prizePotShareToken1: BigNumberish;
    duration: BigNumberish;
    token0: AddressLike;
    token1: AddressLike;
    startBalanceToken0: BigNumberish;
    startBalanceToken1: BigNumberish;
    opponent: AddressLike;
  };

  export type RequestBattleParamsStructOutput = [
    prizePotShareToken0: bigint,
    prizePotShareToken1: bigint,
    duration: bigint,
    token0: string,
    token1: string,
    startBalanceToken0: bigint,
    startBalanceToken1: bigint,
    opponent: string
  ] & {
    prizePotShareToken0: bigint;
    prizePotShareToken1: bigint;
    duration: bigint;
    token0: string;
    token1: string;
    startBalanceToken0: bigint;
    startBalanceToken1: bigint;
    opponent: string;
  };
}

export declare namespace IPoolManager {
  export type ModifyLiquidityParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
    salt: BytesLike;
  };

  export type ModifyLiquidityParamsStructOutput = [
    tickLower: bigint,
    tickUpper: bigint,
    liquidityDelta: bigint,
    salt: string
  ] & {
    tickLower: bigint;
    tickUpper: bigint;
    liquidityDelta: bigint;
    salt: string;
  };

  export type SwapParamsStruct = {
    zeroForOne: boolean;
    amountSpecified: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type SwapParamsStructOutput = [
    zeroForOne: boolean,
    amountSpecified: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    zeroForOne: boolean;
    amountSpecified: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export declare namespace Hooks {
  export type PermissionsStruct = {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
    beforeSwapReturnDelta: boolean;
    afterSwapReturnDelta: boolean;
    afterAddLiquidityReturnDelta: boolean;
    afterRemoveLiquidityReturnDelta: boolean;
  };

  export type PermissionsStructOutput = [
    beforeInitialize: boolean,
    afterInitialize: boolean,
    beforeAddLiquidity: boolean,
    afterAddLiquidity: boolean,
    beforeRemoveLiquidity: boolean,
    afterRemoveLiquidity: boolean,
    beforeSwap: boolean,
    afterSwap: boolean,
    beforeDonate: boolean,
    afterDonate: boolean,
    beforeSwapReturnDelta: boolean,
    afterSwapReturnDelta: boolean,
    afterAddLiquidityReturnDelta: boolean,
    afterRemoveLiquidityReturnDelta: boolean
  ] & {
    beforeInitialize: boolean;
    afterInitialize: boolean;
    beforeAddLiquidity: boolean;
    afterAddLiquidity: boolean;
    beforeRemoveLiquidity: boolean;
    afterRemoveLiquidity: boolean;
    beforeSwap: boolean;
    afterSwap: boolean;
    beforeDonate: boolean;
    afterDonate: boolean;
    beforeSwapReturnDelta: boolean;
    afterSwapReturnDelta: boolean;
    afterAddLiquidityReturnDelta: boolean;
    afterRemoveLiquidityReturnDelta: boolean;
  };
}

export interface BattleswapsHookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptBattle"
      | "afterAddLiquidity"
      | "afterDonate"
      | "afterInitialize"
      | "afterRemoveLiquidity"
      | "afterSwap"
      | "battleRequestKeys"
      | "battleRequests"
      | "battles"
      | "beforeAddLiquidity"
      | "beforeDonate"
      | "beforeInitialize"
      | "beforeRemoveLiquidity"
      | "beforeSwap"
      | "getBattle"
      | "getBattleRequest"
      | "getHookPermissions"
      | "isPlayerWithOpenBattleForPairKey"
      | "isPlayerWithOpenBattleRequestForPairKey"
      | "playersWithOpenBattleRequests"
      | "playersWithOpenBattles"
      | "poolManager"
      | "requestBattle"
      | "unlockCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BattleBalanceUpdatesSkipped"
      | "BattleBalancesUpdated"
      | "BattleRequestAccepted"
      | "BattleRequestCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptBattle",
    values: [BattleswapsHook.AcceptBattleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "battleRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "battleRequests",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "battles",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAddLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDonate",
    values: [AddressLike, PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeInitialize",
    values: [AddressLike, PoolKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveLiquidity",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.ModifyLiquidityParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [
      AddressLike,
      PoolKeyStruct,
      IPoolManager.SwapParamsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattle",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleRequest",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHookPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerWithOpenBattleForPairKey",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerWithOpenBattleRequestForPairKey",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playersWithOpenBattleRequests",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playersWithOpenBattles",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBattle",
    values: [BattleswapsHook.RequestBattleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockCallback",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "battleRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "battleRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "battles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBattle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBattleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHookPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerWithOpenBattleForPairKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerWithOpenBattleRequestForPairKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playersWithOpenBattleRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playersWithOpenBattles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockCallback",
    data: BytesLike
  ): Result;
}

export namespace BattleBalanceUpdatesSkippedEvent {
  export type InputTuple = [
    zeroForOne: boolean,
    player: AddressLike,
    isPlayer0: boolean,
    token0: AddressLike,
    token1: AddressLike,
    requester: AddressLike,
    deltaAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    zeroForOne: boolean,
    player: string,
    isPlayer0: boolean,
    token0: string,
    token1: string,
    requester: string,
    deltaAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    zeroForOne: boolean;
    player: string;
    isPlayer0: boolean;
    token0: string;
    token1: string;
    requester: string;
    deltaAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleBalancesUpdatedEvent {
  export type InputTuple = [
    player: AddressLike,
    isPlayer0: boolean,
    token0: AddressLike,
    token1: AddressLike,
    requester: AddressLike,
    beforeBalanceToken0: BigNumberish,
    beforeBalanceToken1: BigNumberish,
    afterBalanceToken0: BigNumberish,
    afterBalanceToken1: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    isPlayer0: boolean,
    token0: string,
    token1: string,
    requester: string,
    beforeBalanceToken0: bigint,
    beforeBalanceToken1: bigint,
    afterBalanceToken0: bigint,
    afterBalanceToken1: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    player: string;
    isPlayer0: boolean;
    token0: string;
    token1: string;
    requester: string;
    beforeBalanceToken0: bigint;
    beforeBalanceToken1: bigint;
    afterBalanceToken0: bigint;
    afterBalanceToken1: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleRequestAcceptedEvent {
  export type InputTuple = [
    requester: AddressLike,
    accepter: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    prizePotShareToken0: BigNumberish,
    prizePotShareToken1: BigNumberish,
    duration: BigNumberish,
    startBalanceToken0: BigNumberish,
    startBalanceToken1: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    requester: string,
    accepter: string,
    token0: string,
    token1: string,
    prizePotShareToken0: bigint,
    prizePotShareToken1: bigint,
    duration: bigint,
    startBalanceToken0: bigint,
    startBalanceToken1: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    requester: string;
    accepter: string;
    token0: string;
    token1: string;
    prizePotShareToken0: bigint;
    prizePotShareToken1: bigint;
    duration: bigint;
    startBalanceToken0: bigint;
    startBalanceToken1: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BattleRequestCreatedEvent {
  export type InputTuple = [
    requester: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    prizePotShareToken0: BigNumberish,
    prizePotShareToken1: BigNumberish,
    duration: BigNumberish,
    startBalanceToken0: BigNumberish,
    startBalanceToken1: BigNumberish,
    opponent: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    requester: string,
    token0: string,
    token1: string,
    prizePotShareToken0: bigint,
    prizePotShareToken1: bigint,
    duration: bigint,
    startBalanceToken0: bigint,
    startBalanceToken1: bigint,
    opponent: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    requester: string;
    token0: string;
    token1: string;
    prizePotShareToken0: bigint;
    prizePotShareToken1: bigint;
    duration: bigint;
    startBalanceToken0: bigint;
    startBalanceToken1: bigint;
    opponent: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BattleswapsHook extends BaseContract {
  connect(runner?: ContractRunner | null): BattleswapsHook;
  waitForDeployment(): Promise<this>;

  interface: BattleswapsHookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptBattle: TypedContractMethod<
    [params: BattleswapsHook.AcceptBattleParamsStruct],
    [void],
    "payable"
  >;

  afterAddLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  afterDonate: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  afterInitialize: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  afterRemoveLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  afterSwap: TypedContractMethod<
    [
      swapCaller: AddressLike,
      key: PoolKeyStruct,
      swapParams: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;

  battleRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { pairKey: string; requester: string }],
    "view"
  >;

  battleRequests: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        requester: string;
        opponent: string;
        prizePotShareToken0: bigint;
        prizePotShareToken1: bigint;
        duration: bigint;
        startBalanceToken0: bigint;
        startBalanceToken1: bigint;
        token0: string;
        token1: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  battles: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        BattleswapsHook.BattleRequestStructOutput
      ] & {
        player0: string;
        player1: string;
        startedAt: bigint;
        endsAt: bigint;
        player0Token0Balance: bigint;
        player0Token1Balance: bigint;
        player1Token0Balance: bigint;
        player1Token1Balance: bigint;
        battleRequest: BattleswapsHook.BattleRequestStructOutput;
      }
    ],
    "view"
  >;

  beforeAddLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeDonate: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeInitialize: TypedContractMethod<
    [arg0: AddressLike, arg1: PoolKeyStruct, arg2: BigNumberish],
    [string],
    "nonpayable"
  >;

  beforeRemoveLiquidity: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  beforeSwap: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike
    ],
    [[string, bigint, bigint]],
    "nonpayable"
  >;

  getBattle: TypedContractMethod<
    [pairKey: BytesLike, requester: AddressLike],
    [BattleswapsHook.BattleStructOutput],
    "view"
  >;

  getBattleRequest: TypedContractMethod<
    [pairKey: BytesLike, requester: AddressLike],
    [BattleswapsHook.BattleRequestStructOutput],
    "view"
  >;

  getHookPermissions: TypedContractMethod<
    [],
    [Hooks.PermissionsStructOutput],
    "view"
  >;

  isPlayerWithOpenBattleForPairKey: TypedContractMethod<
    [pairKey: BytesLike, player: AddressLike],
    [string],
    "view"
  >;

  isPlayerWithOpenBattleRequestForPairKey: TypedContractMethod<
    [pairKey: BytesLike, player: AddressLike],
    [boolean],
    "view"
  >;

  playersWithOpenBattleRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  playersWithOpenBattles: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;

  poolManager: TypedContractMethod<[], [string], "view">;

  requestBattle: TypedContractMethod<
    [params: BattleswapsHook.RequestBattleParamsStruct],
    [void],
    "payable"
  >;

  unlockCallback: TypedContractMethod<
    [data: BytesLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptBattle"
  ): TypedContractMethod<
    [params: BattleswapsHook.AcceptBattleParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "afterAddLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterDonate"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterInitialize"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterRemoveLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterSwap"
  ): TypedContractMethod<
    [
      swapCaller: AddressLike,
      key: PoolKeyStruct,
      swapParams: IPoolManager.SwapParamsStruct,
      delta: BigNumberish,
      hookData: BytesLike
    ],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "battleRequestKeys"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { pairKey: string; requester: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "battleRequests"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        requester: string;
        opponent: string;
        prizePotShareToken0: bigint;
        prizePotShareToken1: bigint;
        duration: bigint;
        startBalanceToken0: bigint;
        startBalanceToken1: bigint;
        token0: string;
        token1: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "battles"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        BattleswapsHook.BattleRequestStructOutput
      ] & {
        player0: string;
        player1: string;
        startedAt: bigint;
        endsAt: bigint;
        player0Token0Balance: bigint;
        player0Token1Balance: bigint;
        player1Token0Balance: bigint;
        player1Token1Balance: bigint;
        battleRequest: BattleswapsHook.BattleRequestStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "beforeAddLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeDonate"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeInitialize"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: PoolKeyStruct, arg2: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeRemoveLiquidity"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.ModifyLiquidityParamsStruct,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeSwap"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: PoolKeyStruct,
      arg2: IPoolManager.SwapParamsStruct,
      arg3: BytesLike
    ],
    [[string, bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBattle"
  ): TypedContractMethod<
    [pairKey: BytesLike, requester: AddressLike],
    [BattleswapsHook.BattleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBattleRequest"
  ): TypedContractMethod<
    [pairKey: BytesLike, requester: AddressLike],
    [BattleswapsHook.BattleRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHookPermissions"
  ): TypedContractMethod<[], [Hooks.PermissionsStructOutput], "view">;
  getFunction(
    nameOrSignature: "isPlayerWithOpenBattleForPairKey"
  ): TypedContractMethod<
    [pairKey: BytesLike, player: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPlayerWithOpenBattleRequestForPairKey"
  ): TypedContractMethod<
    [pairKey: BytesLike, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "playersWithOpenBattleRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "playersWithOpenBattles"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestBattle"
  ): TypedContractMethod<
    [params: BattleswapsHook.RequestBattleParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unlockCallback"
  ): TypedContractMethod<[data: BytesLike], [string], "nonpayable">;

  getEvent(
    key: "BattleBalanceUpdatesSkipped"
  ): TypedContractEvent<
    BattleBalanceUpdatesSkippedEvent.InputTuple,
    BattleBalanceUpdatesSkippedEvent.OutputTuple,
    BattleBalanceUpdatesSkippedEvent.OutputObject
  >;
  getEvent(
    key: "BattleBalancesUpdated"
  ): TypedContractEvent<
    BattleBalancesUpdatedEvent.InputTuple,
    BattleBalancesUpdatedEvent.OutputTuple,
    BattleBalancesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BattleRequestAccepted"
  ): TypedContractEvent<
    BattleRequestAcceptedEvent.InputTuple,
    BattleRequestAcceptedEvent.OutputTuple,
    BattleRequestAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "BattleRequestCreated"
  ): TypedContractEvent<
    BattleRequestCreatedEvent.InputTuple,
    BattleRequestCreatedEvent.OutputTuple,
    BattleRequestCreatedEvent.OutputObject
  >;

  filters: {
    "BattleBalanceUpdatesSkipped(bool,address,bool,address,address,address,uint256,uint256)": TypedContractEvent<
      BattleBalanceUpdatesSkippedEvent.InputTuple,
      BattleBalanceUpdatesSkippedEvent.OutputTuple,
      BattleBalanceUpdatesSkippedEvent.OutputObject
    >;
    BattleBalanceUpdatesSkipped: TypedContractEvent<
      BattleBalanceUpdatesSkippedEvent.InputTuple,
      BattleBalanceUpdatesSkippedEvent.OutputTuple,
      BattleBalanceUpdatesSkippedEvent.OutputObject
    >;

    "BattleBalancesUpdated(address,bool,address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BattleBalancesUpdatedEvent.InputTuple,
      BattleBalancesUpdatedEvent.OutputTuple,
      BattleBalancesUpdatedEvent.OutputObject
    >;
    BattleBalancesUpdated: TypedContractEvent<
      BattleBalancesUpdatedEvent.InputTuple,
      BattleBalancesUpdatedEvent.OutputTuple,
      BattleBalancesUpdatedEvent.OutputObject
    >;

    "BattleRequestAccepted(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BattleRequestAcceptedEvent.InputTuple,
      BattleRequestAcceptedEvent.OutputTuple,
      BattleRequestAcceptedEvent.OutputObject
    >;
    BattleRequestAccepted: TypedContractEvent<
      BattleRequestAcceptedEvent.InputTuple,
      BattleRequestAcceptedEvent.OutputTuple,
      BattleRequestAcceptedEvent.OutputObject
    >;

    "BattleRequestCreated(address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      BattleRequestCreatedEvent.InputTuple,
      BattleRequestCreatedEvent.OutputTuple,
      BattleRequestCreatedEvent.OutputObject
    >;
    BattleRequestCreated: TypedContractEvent<
      BattleRequestCreatedEvent.InputTuple,
      BattleRequestCreatedEvent.OutputTuple,
      BattleRequestCreatedEvent.OutputObject
    >;
  };
}
