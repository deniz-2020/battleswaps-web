/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  BattleswapsHook,
  BattleswapsHookInterface,
} from "../BattleswapsHook";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_manager",
        type: "address",
        internalType: "contract IPoolManager",
      },
      {
        name: "_battleSwapRouter",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "acceptBattle",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct BattleswapsHook.AcceptBattleParams",
        components: [
          {
            name: "token0",
            type: "address",
            internalType: "address",
          },
          {
            name: "token1",
            type: "address",
            internalType: "address",
          },
          {
            name: "requester",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "afterAddLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "salt",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterDonate",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterInitialize",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint160",
        internalType: "uint160",
      },
      {
        name: "",
        type: "int24",
        internalType: "int24",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterRemoveLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "salt",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "",
        type: "int256",
        internalType: "BalanceDelta",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "afterSwap",
    inputs: [
      {
        name: "swapCaller",
        type: "address",
        internalType: "address",
      },
      {
        name: "key",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "swapParams",
        type: "tuple",
        internalType: "struct IPoolManager.SwapParams",
        components: [
          {
            name: "zeroForOne",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "amountSpecified",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "sqrtPriceLimitX96",
            type: "uint160",
            internalType: "uint160",
          },
        ],
      },
      {
        name: "delta",
        type: "int256",
        internalType: "BalanceDelta",
      },
      {
        name: "hookData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "",
        type: "int128",
        internalType: "int128",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "battleRequestKeys",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "pairKey",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "requester",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "battleRequests",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "requester",
        type: "address",
        internalType: "address",
      },
      {
        name: "opponent",
        type: "address",
        internalType: "address",
      },
      {
        name: "prizePotShareToken0",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "prizePotShareToken1",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "duration",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "startBalanceToken0",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "startBalanceToken1",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "token0",
        type: "address",
        internalType: "address",
      },
      {
        name: "token1",
        type: "address",
        internalType: "address",
      },
      {
        name: "timestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "battles",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "player0",
        type: "address",
        internalType: "address",
      },
      {
        name: "player1",
        type: "address",
        internalType: "address",
      },
      {
        name: "startedAt",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "endsAt",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "player0Token0Balance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "player0Token1Balance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "player1Token0Balance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "player1Token1Balance",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "battleRequest",
        type: "tuple",
        internalType: "struct BattleswapsHook.BattleRequest",
        components: [
          {
            name: "requester",
            type: "address",
            internalType: "address",
          },
          {
            name: "opponent",
            type: "address",
            internalType: "address",
          },
          {
            name: "prizePotShareToken0",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "prizePotShareToken1",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "duration",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "startBalanceToken0",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "startBalanceToken1",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "token0",
            type: "address",
            internalType: "address",
          },
          {
            name: "token1",
            type: "address",
            internalType: "address",
          },
          {
            name: "timestamp",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "beforeAddLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "salt",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeDonate",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeInitialize",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeRemoveLiquidity",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.ModifyLiquidityParams",
        components: [
          {
            name: "tickLower",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "tickUpper",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "liquidityDelta",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "salt",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beforeSwap",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct PoolKey",
        components: [
          {
            name: "currency0",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "currency1",
            type: "address",
            internalType: "Currency",
          },
          {
            name: "fee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "tickSpacing",
            type: "int24",
            internalType: "int24",
          },
          {
            name: "hooks",
            type: "address",
            internalType: "contract IHooks",
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct IPoolManager.SwapParams",
        components: [
          {
            name: "zeroForOne",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "amountSpecified",
            type: "int256",
            internalType: "int256",
          },
          {
            name: "sqrtPriceLimitX96",
            type: "uint160",
            internalType: "uint160",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "",
        type: "int256",
        internalType: "BeforeSwapDelta",
      },
      {
        name: "",
        type: "uint24",
        internalType: "uint24",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getBattle",
    inputs: [
      {
        name: "pairKey",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "requester",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct BattleswapsHook.Battle",
        components: [
          {
            name: "player0",
            type: "address",
            internalType: "address",
          },
          {
            name: "player1",
            type: "address",
            internalType: "address",
          },
          {
            name: "startedAt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "endsAt",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "player0Token0Balance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "player0Token1Balance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "player1Token0Balance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "player1Token1Balance",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "battleRequest",
            type: "tuple",
            internalType: "struct BattleswapsHook.BattleRequest",
            components: [
              {
                name: "requester",
                type: "address",
                internalType: "address",
              },
              {
                name: "opponent",
                type: "address",
                internalType: "address",
              },
              {
                name: "prizePotShareToken0",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "prizePotShareToken1",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "duration",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "startBalanceToken0",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "startBalanceToken1",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "token0",
                type: "address",
                internalType: "address",
              },
              {
                name: "token1",
                type: "address",
                internalType: "address",
              },
              {
                name: "timestamp",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBattleRequest",
    inputs: [
      {
        name: "pairKey",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "requester",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct BattleswapsHook.BattleRequest",
        components: [
          {
            name: "requester",
            type: "address",
            internalType: "address",
          },
          {
            name: "opponent",
            type: "address",
            internalType: "address",
          },
          {
            name: "prizePotShareToken0",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "prizePotShareToken1",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "duration",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "startBalanceToken0",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "startBalanceToken1",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "token0",
            type: "address",
            internalType: "address",
          },
          {
            name: "token1",
            type: "address",
            internalType: "address",
          },
          {
            name: "timestamp",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getHookPermissions",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Hooks.Permissions",
        components: [
          {
            name: "beforeInitialize",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterInitialize",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeAddLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterAddLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeRemoveLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterRemoveLiquidity",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeSwap",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterSwap",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeDonate",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterDonate",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "beforeSwapReturnDelta",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterSwapReturnDelta",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterAddLiquidityReturnDelta",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "afterRemoveLiquidityReturnDelta",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "isPlayerWithOpenBattleForPairKey",
    inputs: [
      {
        name: "pairKey",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "player",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isPlayerWithOpenBattleRequestForPairKey",
    inputs: [
      {
        name: "pairKey",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "player",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "playersWithOpenBattleRequests",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "playersWithOpenBattles",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "poolManager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPoolManager",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "requestBattle",
    inputs: [
      {
        name: "params",
        type: "tuple",
        internalType: "struct BattleswapsHook.RequestBattleParams",
        components: [
          {
            name: "prizePotShareToken0",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "prizePotShareToken1",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "duration",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "token0",
            type: "address",
            internalType: "address",
          },
          {
            name: "token1",
            type: "address",
            internalType: "address",
          },
          {
            name: "startBalanceToken0",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "startBalanceToken1",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "opponent",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "unlockCallback",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "BattleBalanceUpdatesSkipped",
    inputs: [
      {
        name: "zeroForOne",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
      {
        name: "player",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "isPlayer0",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
      {
        name: "token0",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "token1",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "requester",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "deltaAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BattleBalancesUpdated",
    inputs: [
      {
        name: "player",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "isPlayer0",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
      {
        name: "token0",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "token1",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "requester",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "beforeBalanceToken0",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "beforeBalanceToken1",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "afterBalanceToken0",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "afterBalanceToken1",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BattleRequestAccepted",
    inputs: [
      {
        name: "requester",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "accepter",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "token0",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "token1",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "prizePotShareToken0",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "prizePotShareToken1",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "duration",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "startBalanceToken0",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "startBalanceToken1",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BattleRequestCreated",
    inputs: [
      {
        name: "requester",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "token0",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "token1",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "prizePotShareToken0",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "prizePotShareToken1",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "duration",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "startBalanceToken0",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "startBalanceToken1",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "opponent",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "HookNotImplemented",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPool",
    inputs: [],
  },
  {
    type: "error",
    name: "LockFailure",
    inputs: [],
  },
  {
    type: "error",
    name: "NotPoolManager",
    inputs: [],
  },
  {
    type: "error",
    name: "NotSelf",
    inputs: [],
  },
] as const;

export class BattleswapsHook__factory {
  static readonly abi = _abi;
  static createInterface(): BattleswapsHookInterface {
    return new Interface(_abi) as BattleswapsHookInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BattleswapsHook {
    return new Contract(address, _abi, runner) as unknown as BattleswapsHook;
  }
}
